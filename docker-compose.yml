version: "2.2"
services:
  #exporter:
  #  build: ./
  #  image: camptocamp/wal-g-prometheus-exporter:latest
  #  environment:
  #    AWS_ACCESS_KEY_ID: AKIAACCESSKEY
  #    AWS_SECRET_ACCESS_KEY: SECRETSECRET
  #    WALE_S3_PREFIX: s3://walg/backup
  #    AWS_ENDPOINT: http://minio:9000
  #    AWS_S3_FORCE_PATH_STYLE: "true"
  #      #- AWS_REGION=some-region
  #  command: ["/tmp/archive_status"]

  postgres:
    image: camptocamp/postgres:12
    command: -c 'synchronous_commit=off' -c 'fsync=off' -c 'archive_mode=on' -c 'archive_command=/bin/wal-g wal-push %p'
    cpu_count: 1
    environment:
      POSTGRES_PASSWORD: pgpass
      POSTGRES_USER: postgres
      POSTGRES_INITDB_WALDIR: /mnt/wal
      AWS_ACCESS_KEY_ID: AKIAACCESSKEY
      AWS_SECRET_ACCESS_KEY: SECRETSECRET
      WALE_S3_PREFIX: s3://walg/backup
      AWS_ENDPOINT: http://minio:9000
      AWS_S3_FORCE_PATH_STYLE: "true"
    ports:
      - "5432:5432"
    volumes:
      - ./wal:/mnt/wal
      - pgdata:/var/lib/postgresql/data
      - ./docker/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - ./docker/full-backup.sh:/usr/local/bin/full-backup.sh

  full-backup:
    image: camptocamp/postgres:12
    cpu_count: 1
    entrypoint: ""
    command: /usr/local/bin/full-backup.sh
    environment:
      PGUSER: postgres
      PGPASSWORD: pgpass
      PGHOST: postgres
      AWS_ACCESS_KEY_ID: AKIAACCESSKEY
      AWS_SECRET_ACCESS_KEY: SECRETSECRET
      WALE_S3_PREFIX: s3://walg/backup
      AWS_ENDPOINT: http://minio:9000
      AWS_S3_FORCE_PATH_STYLE: "true"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./docker/full-backup.sh:/usr/local/bin/full-backup.sh

  fix-wal-permissions:
    image: camptocamp/postgres:12
    entrypoint: /usr/local/bin/fix-wal-permissions.sh
    volumes:
      - ./wal:/mnt/wal
      - ./docker/fix-wal-permissions.sh:/usr/local/bin/fix-wal-permissions.sh

  traffic:
    image: camptocamp/postgres:12
    entrypoint: ""
    command: /usr/local/bin/traffic.sh
    environment:
      PGUSER: postgres
      PGPASSWORD: pgpass
      PGHOST: postgres
    volumes:
      - ./docker/traffic.sh:/usr/local/bin/traffic.sh

  minio:
    # Limit bandwidth with: tc qdisc add dev br-577ead7e585d root tbf rate 1000kbps latency 50ms burst 2500
    image: minio/minio
    #entrypoint: ""
    #command: sh
    #tty: true
    #stdin_open: true
    command: server /data
    volumes:
      - minio:/data
    ports:
      - "9000:9000"
    environment:
      MINIO_ACCESS_KEY: AKIAACCESSKEY
      MINIO_SECRET_KEY: SECRETSECRET

  create-bucket:
    image: amazon/aws-cli
    entrypoint: /create-bucket-entrypoint.sh
    stop_signal: SIGKILL
    volumes:
      - ./docker/create-bucket-entrypoint.sh:/create-bucket-entrypoint.sh
    environment:
      MINIO_URL: http://minio:9000
      BUCKET: walg
      AWS_ACCESS_KEY_ID: AKIAACCESSKEY
      AWS_SECRET_ACCESS_KEY: SECRETSECRET

  # Observability
  prometheus:
    image: prom/prometheus
    cpu_count: 1
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus:/prometheus
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:6.7.3
    cpu_count: 1
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
      - ./docker/grafana/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./docker/grafana/dashboard.json:/var/lib/grafana/dashboards/dashboard.json
    ports:
      - "3000:3000"

volumes:
    pgdata:
    minio:
    prometheus:
    grafana-data:
